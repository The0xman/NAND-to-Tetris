// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    //Type a-instruction : 0vvvvvvvvvvvvvvv (v = 0 or 1), it is a memory address
    //Type c-instruction : 111accccccdddjjj (refer to 4.2.3 in book for context)
    
    //'decode' MSB to determine whether the passed instruction is of type a or c
   Not(in=instruction[15],out=ains);
   Not(in=ains,out=cins);

   //If the passed instruction is of type c and our destination is A (when the d3 bit(instruction[5])is 1) make sure that the ARegister is altered according to the alout
   And(a=cins,b=instruction[5],out=alutoa);
   Mux16(a=instruction,b=aluout,sel=alutoa,out=aregval);
   Or(a=ains,b=alutoa,out=loadareg);//Remember that we are also loading ARegister if the passed instruction is of type a (ains)
   ARegister(in=aregval,load=loadareg,out=aout,out[0..14]=addressM);//don't forget to output the memory address we are currently accessing


   //Assuming that the passed instruction is of type c use the comp mnemonic bit(Figure 4.3)(instrution[12]) to determine whether the ALU is performing a computation on A or M
   Mux16(a=aout,b=inM,sel=instruction[12],out=amaluin);


   //Use the comp bits 1-6 (Figure 4.3) as the combinatoric 'flags' for the ALU (Figure 2.6)
   //Use the current value in the Dregister and the mux of our comp mnemonic (amaluin) as the ALU's data inputs / operands
   ALU(x=dout,y=amaluin,zx=instruction[11],nx=instruction[10],zy=instruction[9],
   ny=instruction[8],f=instruction[7],no=instruction[6],out=aluout,out=outM,zr=zrout,ng=ngout);//don't forget to output our M value if we are writing to it
   
   //Use the d3 bit (instruction[3]) to determine if the destination of alout is in memory (M)
   And(a=cins,b=instruction[3],out=writeM);//ensure that the passed instruction is of type c, that way no garbage type a instruction based alu calculations are passed through

   //Use d2 bit (instruction[4]) to determine if the destination of aluout is the Dregister
   And(a=cins,b=instruction[4],out=dload);//once again; ensure that the passed instruction is of type c
   DRegister(in=aluout,load=dload,out=dout);

   //Use j-bits of instruction to determine if jump conditions are met based off of our Dregister
   //I suspect that there is a more efficient way to do this with Dmux, but I am dumb
   //Refer to Figure 4.5 for the logic behind the following gates
   And(a=zrout,b=instruction[1],out=jeq);
   And(a=ngout,b=instruction[2],out=jlt);
   Or(a=zrout,b=ngout,out=zrorng);
   Not(in=zrorng,out=pos);
   And(a=pos,b=instruction[0],out=jgt);
   Or(a=jeq,b=jlt,out=jle);
   Or(a=jle,b=jgt,out=jmp);
   And(a=cins,b=jmp,out=pcload);
   Not(in=pcload,out=pcinc);

   //If the jump condition is met, our PC counter goes to the memory address at t-1, else we just inc
   //Refer to bottom of 5.3.1 **Next Instruction Fetching** paragraph for better context 
   PC(in=aout,load=pcload,inc=pcinc,reset=reset,out[0..14]=pc);
}
