// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // set each index of x to 0 if zx == 1
    And16(a=x,b[0..15]=false,out=x1);
    Mux16(a=x,b=x1,sel=zx,out=x2);

    //negate x if nx == 1
    Not16(in=x2,out=x3);
    Mux16(a=x2,b=x3,sel=nx,out=x4);
    

    //set each index of y to 0 if zy == 1
    And16(a=y,b[0..15]=false,out=y1);
    Mux16(a=y,b=y1,sel=zy,out=y2);

    //negate y if ny == 1
    Not16(in=y2,out=y3);
    Mux16(a=y2,b=y3,sel=ny,out=y4);


    //f -- add16 if f == 1 , and16 if f == 0
    Add16(a=x4,b=y4,out=out1);
    And16(a=x4,b=y4,out=out0);
    Mux16(a=out0,b=out1,sel=f,out=out2);

    //Negate the out output if no == 1
    Not16(in=out2,out=out3);
    Mux16(a=out2,b=out3,sel=no,out=out4);
    And16(a=out4,b[0..15]=true,out=out);


    //ng is 1 if out < 0
    And16(a=out4,b[15]=true,b[0..14]=false,out[15]=ng);

    //zr is 1 if out == 0
    Mux16(a=out2,b=out3,sel=no,out[0..7]=outhalf1);
    Mux16(a=out2,b=out3,sel=no,out[8..15]=outhalf2);
    Or8Way(in=outhalf1,out=comp1);
    Or8Way(in=outhalf2,out=comp2);
    Or(a=comp1,b=comp2,out=zrneg);
    Not(in=zrneg,out=zr);
    
}
